{
	"info": {
		"_postman_id": "eaf98492-3eb4-4a90-b813-e524959cb85c",
		"name": "All API methods",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27064219"
	},
	"item": [
		{
			"name": "GET API",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{get_url}}",
					"host": [
						"{{get_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name=pm.variables.replaceIn('{{$randomFirstName}}')\r",
							"pm.collectionVariables.set(\"coll_name\",name)\r",
							"\r",
							"var job=pm.variables.replaceIn('{{$randomJobTitle}}')\r",
							"pm.collectionVariables.set(\"coll_job\",job)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statuscode = pm.response.status;  \r",
							"console.log(statuscode);\r",
							"var countstart = pm.collectionVariables.get(\"start\");\r",
							"var countend = pm.collectionVariables.get(\"End\");\r",
							"if(statuscode == \"Created\")\r",
							"{\r",
							" pm.test(\"Status code is 201\",function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"}\r",
							"else\r",
							"{\r",
							"    if(countstart<countend)\r",
							"    {\r",
							"        pm.collectionVariables.set(\"start\",eval(countstart+1));\r",
							"        console.log(pm.collectionVariables.get(\"start\"));\r",
							"        postman.setNextRequest(\"new request retry\");\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        postman.setNextRequest(null);\r",
							"        pm.collectionVariables.set(\"start\",0);\r",
							"        pm.test(\"statuscode is 200\",function()\r",
							"        {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"//step:2 declare expected result\r",
							"var requestbody=pm.request.body.raw;\r",
							"requestbody=JSON.parse(requestbody);\r",
							"var req_name=requestbody.name;\r",
							"var req_job=requestbody.job;\r",
							"//step:3 generate date as per formate\r",
							"var actualdate=new Date().toJSON().slice(0,13);\r",
							"//extract response body parameter\r",
							"var responsebody=pm.response.json();\r",
							"var res_name=responsebody.name;\r",
							"var res_job=responsebody.job;\r",
							"var res_id=responsebody.id;\r",
							"var res_createdAt=responsebody.createdAt;\r",
							"res_createdAt=res_createdAt.slice(0,13);\r",
							"//validate responsebody parameter\r",
							"pm.test(\"validate responsebody parameter name\",function(){\r",
							"    pm.expect(res_name).to.eql(req_name);\r",
							"})\r",
							"pm.test(\"validate responsebody parameter job\",function(){\r",
							"    pm.expect(res_job).to.eql(req_job);\r",
							"})\r",
							"pm.test(\"validate responsebody parameter id\",function(){\r",
							"    pm.expect(res_id).to.not.null;\r",
							"    pm.expect(res_id).to.not.eql(0);\r",
							"})\r",
							"pm.test(\"validate responsebody parameter date\",function(){\r",
							"    pm.expect(res_createdAt).to.eql(actualdate);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{coll_name}}\",\r\n    \"job\": \"{{coll_job}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{post_url}}",
					"host": [
						"{{post_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "data driven from json",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name=pm.variables.replaceIn('{{$randomFirstName}}')\r",
							"pm.collectionVariables.set(\"coll_name\",name)\r",
							"\r",
							"var job=pm.variables.replaceIn('{{$randomJobTitle}}')\r",
							"pm.collectionVariables.set(\"coll_job\",job)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statuscode = pm.response.status;  \r",
							"console.log(statuscode);\r",
							"var countstart = pm.collectionVariables.get(\"start\");\r",
							"var countend = pm.collectionVariables.get(\"End\");\r",
							"if(statuscode == \"Created\")\r",
							"{\r",
							" pm.test(\"Status code is 201\",function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"}\r",
							"else\r",
							"{\r",
							"    if(countstart<countend)\r",
							"    {\r",
							"        pm.collectionVariables.set(\"start\",eval(countstart+1));\r",
							"        console.log(pm.collectionVariables.get(\"start\"));\r",
							"        postman.setNextRequest(\"new request retry\");\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        postman.setNextRequest(null);\r",
							"        pm.collectionVariables.set(\"start\",0);\r",
							"        pm.test(\"statuscode is 200\",function()\r",
							"        {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"//step:2 declare expected result\r",
							"var requestbody=pm.request.body.raw;\r",
							"requestbody=JSON.parse(requestbody);\r",
							"var req_name=requestbody.name;\r",
							"var req_job=requestbody.job;\r",
							"//step:3 generate date as per formate\r",
							"var actualdate=new Date().toJSON().slice(0,13);\r",
							"//extract response body parameter\r",
							"var responsebody=pm.response.json();\r",
							"var res_name=responsebody.name;\r",
							"var res_job=responsebody.job;\r",
							"var res_id=responsebody.id;\r",
							"var res_createdAt=responsebody.createdAt;\r",
							"res_createdAt=res_createdAt.slice(0,13);\r",
							"//validate responsebody parameter\r",
							"pm.test(\"validate responsebody parameter name\",function(){\r",
							"    pm.expect(res_name).to.eql(req_name);\r",
							"})\r",
							"pm.test(\"validate responsebody parameter job\",function(){\r",
							"    pm.expect(res_job).to.eql(req_job);\r",
							"})\r",
							"pm.test(\"validate responsebody parameter id\",function(){\r",
							"    pm.expect(res_id).to.not.null;\r",
							"    pm.expect(res_id).to.not.eql(0);\r",
							"})\r",
							"pm.test(\"validate responsebody parameter date\",function(){\r",
							"    pm.expect(res_createdAt).to.eql(actualdate);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{coll_name}}\",\r\n    \"job\": \"{{coll_job}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{post_url}}",
					"host": [
						"{{post_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "data driven from csv",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name=pm.variables.replaceIn('{{$randomFirstName}}')\r",
							"pm.collectionVariables.set(\"coll_name\",name)\r",
							"\r",
							"var job=pm.variables.replaceIn('{{$randomJobTitle}}')\r",
							"pm.collectionVariables.set(\"coll_job\",job)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statuscode = pm.response.status;  \r",
							"console.log(statuscode);\r",
							"var countstart = pm.collectionVariables.get(\"start\");\r",
							"var countend = pm.collectionVariables.get(\"End\");\r",
							"if(statuscode == \"Created\")\r",
							"{\r",
							" pm.test(\"Status code is 201\",function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"}\r",
							"else\r",
							"{\r",
							"    if(countstart<countend)\r",
							"    {\r",
							"        pm.collectionVariables.set(\"start\",eval(countstart+1));\r",
							"        console.log(pm.collectionVariables.get(\"start\"));\r",
							"        postman.setNextRequest(\"new request retry\");\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        postman.setNextRequest(null);\r",
							"        pm.collectionVariables.set(\"start\",0);\r",
							"        pm.test(\"statuscode is 200\",function()\r",
							"        {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"//step:2 declare expected result\r",
							"var requestbody=pm.request.body.raw;\r",
							"requestbody=JSON.parse(requestbody);\r",
							"var req_name=requestbody.name;\r",
							"var req_job=requestbody.job;\r",
							"//step:3 generate date as per formate\r",
							"var actualdate=new Date().toJSON().slice(0,13);\r",
							"//extract response body parameter\r",
							"var responsebody=pm.response.json();\r",
							"var res_name=responsebody.name;\r",
							"var res_job=responsebody.job;\r",
							"var res_id=responsebody.id;\r",
							"var res_createdAt=responsebody.createdAt;\r",
							"res_createdAt=res_createdAt.slice(0,13);\r",
							"//validate responsebody parameter\r",
							"pm.test(\"validate responsebody parameter name\",function(){\r",
							"    pm.expect(res_name).to.eql(req_name);\r",
							"})\r",
							"pm.test(\"validate responsebody parameter job\",function(){\r",
							"    pm.expect(res_job).to.eql(req_job);\r",
							"})\r",
							"pm.test(\"validate responsebody parameter id\",function(){\r",
							"    pm.expect(res_id).to.not.null;\r",
							"    pm.expect(res_id).to.not.eql(0);\r",
							"})\r",
							"pm.test(\"validate responsebody parameter date\",function(){\r",
							"    pm.expect(res_createdAt).to.eql(actualdate);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"job\": \"{{job}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{post_url}}",
					"host": [
						"{{post_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name=pm.variables.replaceIn('{{$randomFirstName}}')\r",
							"pm.collectionVariables.set(\"coll_name\",name)\r",
							"\r",
							"var job=pm.variables.replaceIn('{{$randomJobTitle}}')\r",
							"pm.collectionVariables.set(\"coll_job\",job)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statuscode=pm.response.status\r",
							"var countstart=pm.collectionVariables.get(\"start\")\r",
							"var countend=pm.collectionVariables.get(\"End\")\r",
							"\r",
							"if(statuscode == \"OK\")\r",
							"{\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else\r",
							"{\r",
							"    if(countstart<countend)\r",
							"    {\r",
							"        pm.collectionVariables.set(\"start\",eval(countstart+1));\r",
							"        console.log(pm.collectionVariables.get(\"start\"));\r",
							"        postman.setNextRequest(\"modify data retrieve\");\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        postman.setNextRequest(null);\r",
							"        pm.collectionVariables.set(\"start\",0);\r",
							"        pm.test(\"statuscode is 200\",function()\r",
							"        {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"//step:2 declare expected result\r",
							"var requestbody=pm.request.body.raw;\r",
							"requestbody=JSON.parse(requestbody);\r",
							"var req_name=requestbody.name;\r",
							"var req_job=requestbody.job;\r",
							"//step:3 generate date as per formate\r",
							"var actualdate=new Date().toJSON().slice(0,13);\r",
							"//extract response body parameter\r",
							"var responsebody=pm.response.json();\r",
							"var res_name=responsebody.name;\r",
							"var res_job=responsebody.job;\r",
							"var res_updatedAt=responsebody.updatedAt;\r",
							" res_updatedAt= res_updatedAt.slice(0,13);\r",
							"//validate responsebody parameter\r",
							"pm.test(\"validate responsebody parameter name\",function(){\r",
							"    pm.expect(res_name).to.eql(req_name);\r",
							"})\r",
							"pm.test(\"validate responsebody parameter job\",function(){\r",
							"    pm.expect(res_job).to.eql(req_job);\r",
							"})\r",
							"\r",
							"pm.test(\"validate responsebody parameter date\",function(){\r",
							"    pm.expect(res_updatedAt).to.eql(actualdate);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{coll_name}}\",\r\n    \"job\": \"{{coll_job}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{put_url}}",
					"host": [
						"{{put_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name=pm.variables.replaceIn('{{$randomFirstName}}')\r",
							"pm.collectionVariables.set(\"coll_name\",name)\r",
							"\r",
							"var job=pm.variables.replaceIn('{{$randomJobTitle}}')\r",
							"pm.collectionVariables.set(\"coll_job\",job)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statuscode=pm.response.status\r",
							"var countstart=pm.collectionVariables.get(\"start\")\r",
							"var countend=pm.collectionVariables.get(\"End\")\r",
							"\r",
							"if(statuscode == \"OK\")\r",
							"{\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"else\r",
							"{\r",
							"    if(countstart<countend)\r",
							"    {\r",
							"        pm.collectionVariables.set(\"start\",eval(countstart+1));\r",
							"        console.log(pm.collectionVariables.get(\"start\"));\r",
							"        postman.setNextRequest(\"modify data retrieve\");\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        postman.setNextRequest(null);\r",
							"        pm.collectionVariables.set(\"start\",0);\r",
							"        pm.test(\"statuscode is 200\",function()\r",
							"        {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"//step:2 declare expected result\r",
							"var requestbody=pm.request.body.raw;\r",
							"requestbody=JSON.parse(requestbody);\r",
							"var req_name=requestbody.name;\r",
							"var req_job=requestbody.job;\r",
							"//step:3 generate date as per formate\r",
							"var actualdate=new Date().toJSON().slice(0,13);\r",
							"//extract response body parameter\r",
							"var responsebody=pm.response.json();\r",
							"var res_name=responsebody.name;\r",
							"var res_job=responsebody.job;\r",
							"var res_updatedAt=responsebody.updatedAt;\r",
							" res_updatedAt= res_updatedAt.slice(0,13);\r",
							"//validate responsebody parameter\r",
							"pm.test(\"validate responsebody parameter name\",function(){\r",
							"    pm.expect(res_name).to.eql(req_name);\r",
							"})\r",
							"pm.test(\"validate responsebody parameter job\",function(){\r",
							"    pm.expect(res_job).to.eql(req_job);\r",
							"})\r",
							"\r",
							"pm.test(\"validate responsebody parameter date\",function(){\r",
							"    pm.expect(res_updatedAt).to.eql(actualdate);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{coll_name}}\",\r\n    \"job\": \"{{coll_job}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{patch_url}}",
					"host": [
						"{{patch_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE API",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{delete-url}}",
					"host": [
						"{{delete-url}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "coll_name",
			"value": ""
		},
		{
			"key": "coll_job",
			"value": ""
		},
		{
			"key": "start",
			"value": "0",
			"type": "string"
		},
		{
			"key": "End",
			"value": "5",
			"type": "string"
		}
	]
}